name: steam-new-store-rss

on:
  schedule:
    - cron: "*/5 * * * *"   # 5分おき（UTC）
  workflow_dispatch:

concurrency:
  group: steam-rss
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Show trigger and times
        run: |
          echo "event=${{ github.event_name }}"
          echo "UTC:   $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "Local: $(date    '+%Y-%m-%d %H:%M:%S')"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (light)
        run: |
          python3 -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install requests; fi

      - name: Restore state (if any)
        uses: actions/download-artifact@v4
        with:
          name: state
          path: state
        continue-on-error: true

      - name: Ensure state dir
        run: mkdir -p state

      - name: Fast-forward state cursor (hot tail)
        env:
          STATE_PATH: state/state.json.gz
          HOT_TAIL_START: "262000"   # 直近ログの cursor_max(=262804) の少し手前
        shell: bash
        run: |
          python3 - <<'PY'
          import os, json, gzip, pathlib
          state_path = os.environ.get("STATE_PATH", "state/state.json.gz")
          target = int(os.environ.get("HOT_TAIL_START", "262000"))

          def load(path):
              if not os.path.exists(path): return {}
              if path.endswith(".gz"):
                  with gzip.open(path, "rt", encoding="utf-8") as f: return json.load(f)
              with open(path, "r", encoding="utf-8") as f: return json.load(f)

          def dump(path, data):
              pathlib.Path(os.path.dirname(path) or ".").mkdir(parents=True, exist_ok=True)
              if path.endswith(".gz"):
                  with gzip.open(path, "wt", encoding="utf-8") as f: json.dump(data, f, ensure_ascii=False)
              else:
                  with open(path, "w", encoding="utf-8") as f: json.dump(data, f, ensure_ascii=False)

          st = load(state_path) or {}
          st.setdefault("seen", {})
          st.setdefault("cursor", 0)
          before = st["cursor"]
          if before < target:
              st["cursor"] = target
          dump(state_path, st)
          print(f"cursor: {before} -> {st['cursor']}  (seen={len(st['seen'])})")
          PY

      - name: Run script
        run: python3 steam_new_store_rss.py --state-path "state/state.json.gz"

      - name: Upload state
        uses: actions/upload-artifact@v4
        with:
          name: state
          path: state/state.json.gz
          if-no-files-found: warn
